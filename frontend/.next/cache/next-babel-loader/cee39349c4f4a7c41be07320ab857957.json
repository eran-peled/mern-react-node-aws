{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\mern-react-node-aws\\\\frontend\\\\pages\\\\auth\\\\password\\\\reset\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { showSuccessMessage, showErrorMessage } from '../../../../helpers/alerts';\nimport { API } from '../../../../config';\nimport Router, { withRouter } from 'next/router';\nimport jwt from 'jsonwebtoken';\nimport Layout from '../../../../components/Layout';\n\nconst ResetPassword = ({\n  router\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    name: '',\n    token: '',\n    newPassword: '',\n    buttonText: 'Reset Password',\n    success: '',\n    error: ''\n  });\n  const {\n    name,\n    token,\n    newPassword,\n    buttonText,\n    success,\n    error\n  } = state;\n  useEffect(() => {\n    console.log(router);\n    const decoded = jwt.decode(router.query.id);\n    if (decoded) setState(_objectSpread(_objectSpread({}, state), {}, {\n      name: decoded.name,\n      token: router.query.id\n    }));\n  }, [router]);\n\n  const handleChange = e => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      newPassword: e.target.value,\n      success: '',\n      error: ''\n    }));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault(); // console.log('post email to ', email);\n\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      buttonText: 'Sending'\n    }));\n\n    try {\n      const response = await axios.put(`${API}/reset-password`, {\n        resetPasswordLink: token,\n        newPassword\n      }); // console.log('FORGOT PASSWORD', response);\n\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        newPassword: '',\n        buttonText: 'Done',\n        success: response.data.message\n      }));\n    } catch (error) {\n      console.log('RESET PW ERROR', error);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        buttonText: 'Forgot Password',\n        error: error.response.data.error\n      }));\n    }\n  };\n\n  const passwordResetForm = () => __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"password\",\n    className: \"form-control\",\n    onChange: handleChange,\n    value: newPassword,\n    placeholder: \"Type new password\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, __jsx(\"button\", {\n    className: \"btn btn-outline-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, buttonText)));\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"col-md-6 offset-md-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, \"Hi \", name, \", Ready to Reset Password?\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }), success && showSuccessMessage(success), error && showErrorMessage(error), passwordResetForm())));\n};\n\nexport default withRouter(ResetPassword);","map":{"version":3,"sources":["C:/Projects/mern-react-node-aws/frontend/pages/auth/password/reset/[id].js"],"names":["useState","useEffect","axios","showSuccessMessage","showErrorMessage","API","Router","withRouter","jwt","Layout","ResetPassword","router","state","setState","name","token","newPassword","buttonText","success","error","console","log","decoded","decode","query","id","handleChange","e","target","value","handleSubmit","preventDefault","response","put","resetPasswordLink","data","message","passwordResetForm"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { showSuccessMessage, showErrorMessage } from '../../../../helpers/alerts';\r\nimport { API } from '../../../../config';\r\nimport Router, { withRouter } from 'next/router';\r\nimport jwt from 'jsonwebtoken';\r\nimport Layout from '../../../../components/Layout';\r\n\r\nconst ResetPassword = ({ router }) => {\r\n    const [state, setState] = useState({\r\n        name: '',\r\n        token: '',\r\n        newPassword: '',\r\n        buttonText: 'Reset Password',\r\n        success: '',\r\n        error: ''\r\n    });\r\n    const { name, token, newPassword, buttonText, success, error } = state;\r\n\r\n    useEffect(() => {\r\n        console.log(router);\r\n        const decoded = jwt.decode(router.query.id);\r\n        if (decoded) setState({ ...state, name: decoded.name, token: router.query.id });\r\n    }, [router]);\r\n\r\n    const handleChange = e => {\r\n        setState({ ...state, newPassword: e.target.value, success: '', error: '' });\r\n    };\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n        // console.log('post email to ', email);\r\n        setState({ ...state, buttonText: 'Sending' });\r\n        try {\r\n            const response = await axios.put(`${API}/reset-password`, { resetPasswordLink: token, newPassword });\r\n            // console.log('FORGOT PASSWORD', response);\r\n            setState({\r\n                ...state,\r\n                newPassword: '',\r\n                buttonText: 'Done',\r\n                success: response.data.message\r\n            });\r\n        } catch (error) {\r\n            console.log('RESET PW ERROR', error);\r\n            setState({\r\n                ...state,\r\n                buttonText: 'Forgot Password',\r\n                error: error.response.data.error\r\n            });\r\n        }\r\n    };\r\n\r\n    const passwordResetForm = () => (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <input\r\n                    type=\"password\"\r\n                    className=\"form-control\"\r\n                    onChange={handleChange}\r\n                    value={newPassword}\r\n                    placeholder=\"Type new password\"\r\n                    required\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className=\"btn btn-outline-warning\">{buttonText}</button>\r\n            </div>\r\n        </form>\r\n    );\r\n\r\n    return (\r\n        <Layout>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 offset-md-3\">\r\n                    <h1>Hi {name}, Ready to Reset Password?</h1>\r\n                    <br />\r\n                    {success && showSuccessMessage(success)}\r\n                    {error && showErrorMessage(error)}\r\n                    {passwordResetForm()}\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default withRouter(ResetPassword);\r\n"]},"metadata":{},"sourceType":"module"}
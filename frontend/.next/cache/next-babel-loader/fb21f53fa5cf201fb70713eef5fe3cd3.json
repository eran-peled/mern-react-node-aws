{"ast":null,"code":"import cookie from 'js-cookie';\nimport Router from 'next/router'; // set in cookie\n\nexport var setCookie = function setCookie(key, value) {\n  if (true) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n}; // remove from cookie\n\nexport var removeCookie = function removeCookie(key) {\n  if (true) {\n    cookie.remove(key);\n  }\n}; // get from cookie such as stored token\n// will be useful when we need to make request to server with auth token\n\nexport var getCookie = function getCookie(key, req) {\n  // if (process.browser) {\n  //     return cookie.get(key);\n  // }\n  return true ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n};\nexport var getCookieFromBrowser = function getCookieFromBrowser(key) {\n  return cookie.get(key);\n};\nexport var getCookieFromServer = function getCookieFromServer(key, req) {\n  if (!req.headers.cookie) {\n    return undefined;\n  }\n\n  console.log('req.headers.cookie', req.headers.cookie);\n  var token = req.headers.cookie.split(';').find(function (c) {\n    return c.trim().startsWith(\"\".concat(key, \"=\"));\n  });\n\n  if (!token) {\n    return undefined;\n  }\n\n  var tokenValue = token.split('=')[1];\n  console.log('getCookieFromServer', tokenValue);\n  return tokenValue;\n}; // set in localstoarge\n\nexport var setLocalStorage = function setLocalStorage(key, value) {\n  if (true) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n}; // remove from localstorage\n\nexport var removeLocalStorage = function removeLocalStorage(key) {\n  if (true) {\n    localStorage.removeItem(key);\n  }\n}; // authenticate user by passing data to cookie and localstorage during signin\n\nexport var authenticate = function authenticate(response, next) {\n  setCookie('token', response.data.token);\n  setLocalStorage('user', response.data.user);\n  next();\n}; // access user info from localstorage\n\nexport var isAuth = function isAuth() {\n  if (true) {\n    var cookieChecked = getCookie('token');\n\n    if (cookieChecked) {\n      if (localStorage.getItem('user')) {\n        return JSON.parse(localStorage.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};\nexport var logout = function logout() {\n  removeCookie('token');\n  removeLocalStorage('user');\n  Router.push('/login');\n};","map":{"version":3,"sources":["C:/Projects/mern-react-node-aws/frontend/helpers/auth.js"],"names":["cookie","Router","setCookie","key","value","set","expires","removeCookie","remove","getCookie","req","getCookieFromBrowser","getCookieFromServer","get","headers","undefined","console","log","token","split","find","c","trim","startsWith","tokenValue","setLocalStorage","localStorage","setItem","JSON","stringify","removeLocalStorage","removeItem","authenticate","response","next","data","user","isAuth","cookieChecked","getItem","parse","logout","push"],"mappings":"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","sourcesContent":["import cookie from 'js-cookie';\r\nimport Router from 'next/router';\r\n\r\n// set in cookie\r\nexport const setCookie = (key, value) => {\r\n    if (process.browser) {\r\n        cookie.set(key, value, {\r\n            expires: 1\r\n        });\r\n    }\r\n};\r\n\r\n// remove from cookie\r\nexport const removeCookie = key => {\r\n    if (process.browser) {\r\n        cookie.remove(key);\r\n    }\r\n};\r\n\r\n// get from cookie such as stored token\r\n// will be useful when we need to make request to server with auth token\r\nexport const getCookie = (key, req) => {\r\n    // if (process.browser) {\r\n    //     return cookie.get(key);\r\n    // }\r\n    return process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\r\n};\r\n\r\nexport const getCookieFromBrowser = key => {\r\n    return cookie.get(key);\r\n};\r\n\r\nexport const getCookieFromServer = (key, req) => {\r\n    if (!req.headers.cookie) {\r\n        return undefined;\r\n    }\r\n    console.log('req.headers.cookie', req.headers.cookie);\r\n    let token = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\r\n    if (!token) {\r\n        return undefined;\r\n    }\r\n    let tokenValue = token.split('=')[1];\r\n    console.log('getCookieFromServer', tokenValue);\r\n    return tokenValue;\r\n};\r\n\r\n// set in localstoarge\r\nexport const setLocalStorage = (key, value) => {\r\n    if (process.browser) {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n};\r\n\r\n// remove from localstorage\r\nexport const removeLocalStorage = key => {\r\n    if (process.browser) {\r\n        localStorage.removeItem(key);\r\n    }\r\n};\r\n\r\n// authenticate user by passing data to cookie and localstorage during signin\r\nexport const authenticate = (response, next) => {\r\n    setCookie('token', response.data.token);\r\n    setLocalStorage('user', response.data.user);\r\n    next();\r\n};\r\n\r\n// access user info from localstorage\r\nexport const isAuth = () => {\r\n    if (process.browser) {\r\n        const cookieChecked = getCookie('token');\r\n        if (cookieChecked) {\r\n            if (localStorage.getItem('user')) {\r\n                return JSON.parse(localStorage.getItem('user'));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const logout = () => {\r\n    removeCookie('token');\r\n    removeLocalStorage('user');\r\n    Router.push('/login');\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
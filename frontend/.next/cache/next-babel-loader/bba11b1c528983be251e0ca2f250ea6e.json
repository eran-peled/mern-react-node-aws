{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport Layout from '../../../components/Layout';\nimport Link from 'next/link';\nimport axios from 'axios';\nimport renderHTML from 'react-render-html';\nimport moment from 'moment';\nimport { API } from '../../../config';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport withAdmin from '../../withAdmin';\nimport { getCookie } from '../../../helpers/auth';\n\nconst Links = ({\n  token,\n  links,\n  totalLinks,\n  linksLimit,\n  linkSkip\n}) => {\n  const {\n    0: allLinks,\n    1: setAllLinks\n  } = useState(links);\n  const {\n    0: limit,\n    1: setLimit\n  } = useState(linksLimit);\n  const {\n    0: skip,\n    1: setSkip\n  } = useState(0);\n  const {\n    0: size,\n    1: setSize\n  } = useState(totalLinks);\n\n  const confirmDelete = (e, id) => {\n    e.preventDefault(); // console.log('delete > ', slug);\n\n    let answer = window.confirm('Are you sure you want to delete?');\n\n    if (answer) {\n      handleDelete(id);\n    }\n  };\n\n  const handleDelete = async id => {\n    try {\n      const response = await axios.delete(`${API}/link/admin/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('LINK DELETE SUCCESS ', response);\n      false && window.location.reload();\n    } catch (error) {\n      console.log('LINK DELETE ', error);\n    }\n  };\n\n  const listOfLinks = () => allLinks.map((l, i) => __jsx(\"div\", {\n    key: i,\n    className: \"row alert alert-primary p-2\"\n  }, __jsx(\"div\", {\n    className: \"col-md-8\",\n    onClick: e => handleClick(l._id)\n  }, __jsx(\"a\", {\n    href: l.url,\n    target: \"_blank\"\n  }, __jsx(\"h5\", {\n    className: \"pt-2\"\n  }, l.title), __jsx(\"h6\", {\n    className: \"pt-2 text-danger\",\n    style: {\n      fontSize: '12px'\n    }\n  }, l.url))), __jsx(\"div\", {\n    className: \"col-md-4 pt-2\"\n  }, __jsx(\"span\", {\n    className: \"pull-right\"\n  }, moment(l.createdAt).fromNow(), \" by \", l.postedBy.name), __jsx(\"br\", null), __jsx(\"span\", {\n    className: \"badge text-secondary pull-right\"\n  }, l.clicks, \" clicks\")), __jsx(\"div\", {\n    className: \"col-md-12\"\n  }, __jsx(\"span\", {\n    className: \"badge text-dark\"\n  }, l.type, \" / \", l.medium), l.categories.map((c, i) => __jsx(\"span\", {\n    key: i,\n    className: \"badge text-success\"\n  }, c.name)), __jsx(\"span\", {\n    onClick: e => confirmDelete(e, l._id),\n    className: \"badge text-danger pull-right\"\n  }, \"Delete\"), __jsx(Link, {\n    href: `/user/link/${l._id}`\n  }, __jsx(\"a\", null, __jsx(\"span\", {\n    className: \"badge text-warning pull-right\"\n  }, \"Update\"))))));\n\n  const loadMore = async () => {\n    let toSkip = skip + limit;\n    const response = await axios.post(`${API}/links`, {\n      skip: toSkip,\n      limit\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    setAllLinks([...allLinks, ...response.data]); // console.log('allLinks', allLinks);\n    // console.log('response.data.links.length', response.data.links.length);\n\n    setSize(response.data.length);\n    setSkip(toSkip);\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-12\"\n  }, __jsx(\"h1\", {\n    className: \"display-4 font-weight-bold\"\n  }, \"All Links\"))), __jsx(\"br\", null), __jsx(InfiniteScroll, {\n    pageStart: 0,\n    loadMore: loadMore,\n    hasMore: size > 0 && size >= limit,\n    loader: __jsx(\"img\", {\n      key: 0,\n      src: \"/static/images/loading.gif\",\n      alt: \"loading\"\n    })\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-12\"\n  }, listOfLinks()))));\n};\n\nLinks.getInitialProps = async ({\n  req\n}) => {\n  let skip = 0;\n  let limit = 2;\n  const token = getCookie('token', req);\n  const response = await axios.post(`${API}/links`, {\n    skip,\n    limit\n  }, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return {\n    links: response.data,\n    totalLinks: response.data.length,\n    linksLimit: limit,\n    linkSkip: skip,\n    token\n  };\n};\n\nexport default withAdmin(Links);","map":null,"metadata":{},"sourceType":"module"}
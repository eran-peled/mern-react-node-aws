{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// imports\nimport { useState, useEffect } from 'react';\nimport Layout from '../../../components/Layout';\nimport axios from 'axios';\nimport withUser from '../../withUser';\nimport { getCookie, isAuth } from '../../../helpers/auth';\nimport { API } from '../../../config';\nimport { showSuccessMessage, showErrorMessage } from '../../../helpers/alerts';\n\nconst Update = ({\n  oldLink,\n  token\n}) => {\n  // state\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    title: oldLink.title,\n    url: oldLink.url,\n    categories: oldLink.categories,\n    loadedCategories: [],\n    success: '',\n    error: '',\n    type: oldLink.type,\n    medium: oldLink.medium\n  });\n  const {\n    title,\n    url,\n    categories,\n    loadedCategories,\n    success,\n    error,\n    type,\n    medium\n  } = state; // load categories when component mounts using useEffect\n\n  useEffect(() => {\n    loadCategories();\n  }, [success]);\n\n  const loadCategories = async () => {\n    const response = await axios.get(`${API}/categories`);\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      loadedCategories: response.data\n    }));\n  };\n\n  const handleTitleChange = e => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      title: e.target.value,\n      error: '',\n      success: ''\n    }));\n  };\n\n  const handleURLChange = e => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      url: e.target.value,\n      error: '',\n      success: ''\n    }));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault(); // console.table({ title, url, categories, type, medium });\n    // use update link based on logged in user role\n\n    let dynamicUpdateUrl;\n\n    if (isAuth() && isAuth().role === 'admin') {\n      dynamicUpdateUrl = `${API}/link/admin/${oldLink._id}`;\n    } else {\n      dynamicUpdateUrl = `${API}/link/${oldLink._id}`;\n    }\n\n    try {\n      const response = await axios.put(dynamicUpdateUrl, {\n        title,\n        url,\n        categories,\n        type,\n        medium\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        success: 'Link is updated'\n      }));\n    } catch (error) {\n      console.log('LINK SUBMIT ERROR', error);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        error: error.response.data.error\n      }));\n    }\n  };\n\n  const handleTypeClick = e => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      type: e.target.value,\n      success: '',\n      error: ''\n    }));\n  };\n\n  const handleMediumClick = e => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      medium: e.target.value,\n      success: '',\n      error: ''\n    }));\n  };\n\n  const showMedium = () => __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"form-check ml-3\"\n  }, __jsx(\"label\", {\n    className: \"form-check-label\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleMediumClick,\n    checked: medium === 'video',\n    value: \"video\",\n    className: \"from-check-input\",\n    name: \"medium\"\n  }), ' ', \"Video\")), __jsx(\"div\", {\n    className: \"form-check ml-3\"\n  }, __jsx(\"label\", {\n    className: \"form-check-label\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleMediumClick,\n    checked: medium === 'book',\n    value: \"book\",\n    className: \"from-check-input\",\n    name: \"medium\"\n  }), ' ', \"Book\")));\n\n  const showTypes = () => __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"form-check ml-3\"\n  }, __jsx(\"label\", {\n    className: \"form-check-label\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleTypeClick,\n    checked: type === 'free',\n    value: \"free\",\n    className: \"from-check-input\",\n    name: \"type\"\n  }), ' ', \"Free\")), __jsx(\"div\", {\n    className: \"form-check ml-3\"\n  }, __jsx(\"label\", {\n    className: \"form-check-label\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleTypeClick,\n    checked: type === 'paid',\n    value: \"paid\",\n    className: \"from-check-input\",\n    name: \"type\"\n  }), ' ', \"Paid\")));\n\n  const handleToggle = c => () => {\n    // return the first index or -1\n    const clickedCategory = categories.indexOf(c);\n    const all = [...categories];\n\n    if (clickedCategory === -1) {\n      all.push(c);\n    } else {\n      all.splice(clickedCategory, 1);\n    }\n\n    console.log('all >> categories', all);\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      categories: all,\n      success: '',\n      error: ''\n    }));\n  }; // show categories > checkbox\n\n\n  const showCategories = () => {\n    return loadedCategories && loadedCategories.map((c, i) => __jsx(\"li\", {\n      className: \"list-unstyled\",\n      key: c._id\n    }, __jsx(\"input\", {\n      type: \"checkbox\",\n      checked: categories.includes(c._id),\n      onChange: handleToggle(c._id),\n      className: \"mr-2\"\n    }), __jsx(\"label\", {\n      className: \"form-check-label\"\n    }, c.name)));\n  }; // link create form\n\n\n  const submitLinkForm = () => __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    className: \"text-muted\"\n  }, \"Title\"), __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    onChange: handleTitleChange,\n    value: title\n  })), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    className: \"text-muted\"\n  }, \"URL\"), __jsx(\"input\", {\n    type: \"url\",\n    className: \"form-control\",\n    onChange: handleURLChange,\n    value: url\n  })), __jsx(\"div\", null, __jsx(\"button\", {\n    disabled: !token,\n    className: \"btn btn-outline-warning\",\n    type: \"submit\"\n  }, isAuth() || token ? 'Update' : 'Login to update')));\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-12\"\n  }, __jsx(\"h1\", null, \"Update Link/URL\"), __jsx(\"br\", null))), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-4\"\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    className: \"text-muted ml-4\"\n  }, \"Category\"), __jsx(\"ul\", {\n    style: {\n      maxHeight: '100px',\n      overflowY: 'scroll'\n    }\n  }, showCategories())), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    className: \"text-muted ml-4\"\n  }, \"Type\"), showTypes()), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    className: \"text-muted ml-4\"\n  }, \"Medium\"), showMedium())), __jsx(\"div\", {\n    className: \"col-md-8\"\n  }, success && showSuccessMessage(success), error && showErrorMessage(error), submitLinkForm())));\n};\n\nUpdate.getInitialProps = async ({\n  req,\n  token,\n  query\n}) => {\n  const response = await axios.get(`${API}/link/${query.id}`);\n  return {\n    oldLink: response.data,\n    token\n  };\n};\n\nexport default withUser(Update);","map":null,"metadata":{},"sourceType":"module"}
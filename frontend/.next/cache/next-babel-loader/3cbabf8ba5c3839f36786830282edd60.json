{"ast":null,"code":"import cookie from 'js-cookie';\nimport Router from 'next/router'; // set in cookie\n\nexport const setCookie = (key, value) => {\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n}; // remove from cookie\n\nexport const removeCookie = key => {\n  if (false) {\n    cookie.remove(key);\n  }\n}; // get from cookie such as stored token\n// will be useful when we need to make request to server with auth token\n\nexport const getCookie = (key, req) => {\n  // if (process.browser) {\n  //     return cookie.get(key);\n  // }\n  return false ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n};\nexport const getCookieFromBrowser = key => {\n  return cookie.get(key);\n};\nexport const getCookieFromServer = (key, req) => {\n  if (!req.headers.cookie) {\n    return undefined;\n  } // console.log('req.headers.cookie', req.headers.cookie);\n\n\n  let token = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\n\n  if (!token) {\n    return undefined;\n  }\n\n  let tokenValue = token.split('=')[1]; // console.log('getCookieFromServer', tokenValue);\n\n  return tokenValue;\n}; // set in localstoarge\n\nexport const setLocalStorage = (key, value) => {\n  if (false) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n}; // remove from localstorage\n\nexport const removeLocalStorage = key => {\n  if (false) {\n    localStorage.removeItem(key);\n  }\n}; // authenticate user by passing data to cookie and localstorage during signin\n\nexport const authenticate = (response, next) => {\n  setCookie('token', response.data.token);\n  setLocalStorage('user', response.data.user);\n  next();\n}; // access user info from localstorage\n\nexport const isAuth = () => {\n  if (false) {\n    const cookieChecked = getCookie('token');\n\n    if (cookieChecked) {\n      if (localStorage.getItem('user')) {\n        return JSON.parse(localStorage.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};\nexport const logout = () => {\n  removeCookie('token');\n  removeLocalStorage('user');\n  Router.push('/login');\n};","map":{"version":3,"sources":["C:/Projects/mern-react-node-aws/frontend/helpers/auth.js"],"names":["cookie","Router","setCookie","key","value","set","expires","removeCookie","remove","getCookie","req","getCookieFromBrowser","getCookieFromServer","get","headers","undefined","token","split","find","c","trim","startsWith","tokenValue","setLocalStorage","localStorage","setItem","JSON","stringify","removeLocalStorage","removeItem","authenticate","response","next","data","user","isAuth","cookieChecked","getItem","parse","logout","push"],"mappings":"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","sourcesContent":["import cookie from 'js-cookie';\r\nimport Router from 'next/router';\r\n\r\n// set in cookie\r\nexport const setCookie = (key, value) => {\r\n    if (process.browser) {\r\n        cookie.set(key, value, {\r\n            expires: 1\r\n        });\r\n    }\r\n};\r\n\r\n// remove from cookie\r\nexport const removeCookie = key => {\r\n    if (process.browser) {\r\n        cookie.remove(key);\r\n    }\r\n};\r\n\r\n// get from cookie such as stored token\r\n// will be useful when we need to make request to server with auth token\r\nexport const getCookie = (key, req) => {\r\n    // if (process.browser) {\r\n    //     return cookie.get(key);\r\n    // }\r\n    return process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\r\n};\r\n\r\nexport const getCookieFromBrowser = key => {\r\n    return cookie.get(key);\r\n};\r\n\r\nexport const getCookieFromServer = (key, req) => {\r\n    if (!req.headers.cookie) {\r\n        return undefined;\r\n    }\r\n    // console.log('req.headers.cookie', req.headers.cookie);\r\n    let token = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\r\n    if (!token) {\r\n        return undefined;\r\n    }\r\n    let tokenValue = token.split('=')[1];\r\n    // console.log('getCookieFromServer', tokenValue);\r\n    return tokenValue;\r\n};\r\n\r\n// set in localstoarge\r\nexport const setLocalStorage = (key, value) => {\r\n    if (process.browser) {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n};\r\n\r\n// remove from localstorage\r\nexport const removeLocalStorage = key => {\r\n    if (process.browser) {\r\n        localStorage.removeItem(key);\r\n    }\r\n};\r\n\r\n// authenticate user by passing data to cookie and localstorage during signin\r\nexport const authenticate = (response, next) => {\r\n    setCookie('token', response.data.token);\r\n    setLocalStorage('user', response.data.user);\r\n    next();\r\n};\r\n\r\n// access user info from localstorage\r\nexport const isAuth = () => {\r\n    if (process.browser) {\r\n        const cookieChecked = getCookie('token');\r\n        if (cookieChecked) {\r\n            if (localStorage.getItem('user')) {\r\n                return JSON.parse(localStorage.getItem('user'));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const logout = () => {\r\n    removeCookie('token');\r\n    removeLocalStorage('user');\r\n    Router.push('/login');\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
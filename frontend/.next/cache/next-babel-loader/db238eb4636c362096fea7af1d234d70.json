{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport dynamic from 'next/dynamic';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Resizer from 'react-image-file-resizer';\nconst ReactQuill = dynamic(() => import('react-quill'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-quill')],\n    modules: ['react-quill']\n  }\n});\nimport { API } from '../../../config';\nimport { showSuccessMessage, showErrorMessage } from '../../../helpers/alerts';\nimport Layout from '../../../components/Layout';\nimport withAdmin from '../../withAdmin';\nimport 'react-quill/dist/quill.bubble.css';\n\nconst Update = ({\n  oldCategory,\n  token\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    name: oldCategory.name,\n    error: '',\n    success: '',\n    buttonText: 'Update',\n    imagePreview: oldCategory.image.url,\n    image: ''\n  });\n  const {\n    0: content,\n    1: setContent\n  } = useState(oldCategory.content);\n  const {\n    0: imageUploadButtonName,\n    1: setImageUploadButtonName\n  } = useState('Update image');\n  const {\n    name,\n    success,\n    error,\n    image,\n    buttonText,\n    imagePreview\n  } = state;\n\n  const handleChange = name => e => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      [name]: e.target.value,\n      error: '',\n      success: ''\n    }));\n  };\n\n  const handleContent = e => {\n    console.log(e);\n    setContent(e);\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      success: '',\n      error: ''\n    }));\n  };\n\n  const handleImage = event => {\n    let fileInput = false;\n\n    if (event.target.files[0]) {\n      fileInput = true;\n    }\n\n    setImageUploadButtonName(event.target.files[0].name);\n\n    if (fileInput) {\n      Resizer.imageFileResizer(event.target.files[0], 300, 300, 'JPEG', 100, 0, uri => {\n        // console.log(uri);\n        setState(_objectSpread(_objectSpread({}, state), {}, {\n          image: uri,\n          success: '',\n          error: ''\n        }));\n      }, 'base64');\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      buttonText: 'Updating'\n    }));\n    console.table({\n      name,\n      content,\n      image\n    });\n\n    try {\n      const response = await axios.put(`${API}/category/${oldCategory.slug}`, {\n        name,\n        content,\n        image\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('CATEGORY UPDATE RESPONSE', response);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        imagePreview: response.data.image.url,\n        success: `${response.data.name} is updated`\n      }));\n      setContent(response.data.content);\n    } catch (error) {\n      console.log('CATEGORY CREATE ERROR', error);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        buttonText: 'Create',\n        error: error.response.data.error\n      }));\n    }\n  };\n\n  const updateCategoryForm = () => __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    className: \"text-muted\"\n  }, \"Name\"), __jsx(\"input\", {\n    onChange: handleChange('name'),\n    value: name,\n    type: \"text\",\n    className: \"form-control\",\n    required: true\n  })), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    className: \"text-muted\"\n  }, \"Content\"), __jsx(ReactQuill, {\n    value: content,\n    onChange: handleContent,\n    placeholder: \"Write something...\",\n    theme: \"bubble\",\n    className: \"pb-5 mb-3\",\n    style: {\n      border: '1px solid #666'\n    }\n  })), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    className: \"btn btn-outline-secondary\"\n  }, imageUploadButtonName, ' ', __jsx(\"span\", null, __jsx(\"img\", {\n    src: imagePreview,\n    alt: \"image\",\n    height: \"20\"\n  })), __jsx(\"input\", {\n    onChange: handleImage,\n    type: \"file\",\n    accept: \"image/*\",\n    className: \"form-control\",\n    hidden: true\n  }))), __jsx(\"div\", null, __jsx(\"button\", {\n    className: \"btn btn-outline-warning\"\n  }, buttonText)));\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-6 offset-md-3\"\n  }, __jsx(\"h1\", null, \"Update category\"), __jsx(\"br\", null), success && showSuccessMessage(success), error && showErrorMessage(error), updateCategoryForm())));\n};\n\nUpdate.getInitialProps = async ({\n  req,\n  query,\n  token\n}) => {\n  const response = await axios.post(`${API}/category/${query.slug}`);\n  return {\n    oldCategory: response.data.category,\n    token\n  };\n};\n\nexport default withAdmin(Update);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport Layout from '../../../components/Layout';\nimport Router from 'next/router';\nimport axios from 'axios';\nimport { showSuccessMessage, showErrorMessage } from '../../../helpers/alerts';\nimport { API } from '../../../config';\nimport { isAuth, updateUser } from '../../../helpers/auth';\nimport withUser from '../../withUser';\n\nconst Profile = ({\n  user,\n  token\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    name: user.name,\n    email: user.email,\n    password: '',\n    error: '',\n    success: '',\n    buttonText: 'Update',\n    loadedCategories: [],\n    categories: user.categories\n  });\n  const {\n    name,\n    email,\n    password,\n    error,\n    success,\n    buttonText,\n    loadedCategories,\n    categories\n  } = state; // load categories when component mounts using useEffect\n\n  useEffect(() => {\n    loadCategories();\n  }, []);\n\n  const loadCategories = async () => {\n    const response = await axios.get(`${API}/categories`);\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      loadedCategories: response.data\n    }));\n  };\n\n  const handleToggle = c => () => {\n    // return the first index or -1\n    const clickedCategory = categories.indexOf(c);\n    const all = [...categories];\n\n    if (clickedCategory === -1) {\n      all.push(c);\n    } else {\n      all.splice(clickedCategory, 1);\n    }\n\n    console.log('all >> categories', all);\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      categories: all,\n      success: '',\n      error: ''\n    }));\n  }; // show categories > checkbox\n\n\n  const showCategories = () => {\n    return loadedCategories && loadedCategories.map((c, i) => __jsx(\"li\", {\n      className: \"list-unstyled\",\n      key: c._id\n    }, __jsx(\"input\", {\n      type: \"checkbox\",\n      onChange: handleToggle(c._id),\n      checked: categories.includes(c._id),\n      className: \"mr-2\"\n    }), __jsx(\"label\", {\n      className: \"form-check-label\"\n    }, c.name)));\n  };\n\n  const handleChange = name => e => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      [name]: e.target.value,\n      error: '',\n      success: '',\n      buttonText: 'Update'\n    }));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      buttonText: 'Updating...'\n    }));\n\n    try {\n      const response = await axios.put(`${API}/user`, {\n        name,\n        password,\n        categories\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(response);\n      updateUser(response.data, () => {\n        setState(_objectSpread(_objectSpread({}, state), {}, {\n          buttonText: 'Updated',\n          success: 'Profile updated successfully'\n        }));\n      });\n    } catch (error) {\n      console.log(error);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        buttonText: 'Update',\n        error: error.response.data.error\n      }));\n    }\n  };\n\n  const updateForm = () => __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"input\", {\n    value: name,\n    onChange: handleChange('name'),\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"Type your name\",\n    required: true\n  })), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"input\", {\n    value: email,\n    onChange: handleChange('email'),\n    type: \"email\",\n    className: \"form-control\",\n    placeholder: \"Type your email\",\n    required: true,\n    disabled: true\n  })), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"input\", {\n    value: password,\n    onChange: handleChange('password'),\n    type: \"password\",\n    className: \"form-control\",\n    placeholder: \"Type your password\"\n  })), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    className: \"text-muted ml-4\"\n  }, \"Category\"), __jsx(\"ul\", {\n    style: {\n      maxHeight: '100px',\n      overflowY: 'scroll'\n    }\n  }, showCategories())), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-outline-warning\"\n  }, buttonText)));\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"col-md-6 offset-md-3\"\n  }, __jsx(\"h1\", null, \"Update Profile\"), __jsx(\"br\", null), success && showSuccessMessage(success), error && showErrorMessage(error), updateForm()));\n};\n\nexport default withUser(Profile);","map":null,"metadata":{},"sourceType":"module"}